{"version":3,"sources":["components/Homepage.jsx","components/Addroom.jsx","components/Title.jsx","components/Room.jsx","App.js","serviceWorker.js","index.js"],"names":["Homepage","props","to","style","backgroundColor","color","typeroom","name","type","className","Addroom","useState","setTypeRoom","setName","roomColor","setRoomColor","onChange","e","target","value","id","selected","onClick","alert","placeholder","length","add","Title","Room","App","roomList","setRoomList","addRoomToList","map","element","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAGe,SAASA,EAASC,GAC7B,OACI,6BACI,6BACE,kBAAC,IAAD,CAAMC,GAAG,SAAT,IAAkB,4BAAQC,MAAO,CAACC,gBAAgBH,EAAMI,QAAQ,4BAAKJ,EAAMK,UAAc,4BAAKL,EAAMM,MAAlF,OAEpB,6BACA,kBAAC,IAAD,CAAML,GAAG,YAAW,4BAAQM,KAAK,SAASC,UAAU,mBAAhC,QCPjB,SAASC,EAAQT,GAAQ,IAAD,EAGNU,mBAAS,IAHH,mBAG5BL,EAH4B,KAGnBM,EAHmB,OAIdD,mBAAS,IAJK,mBAI5BJ,EAJ4B,KAIvBM,EAJuB,OAKJF,mBAAS,IALL,mBAK5BG,EAL4B,KAKlBC,EALkB,OAMRJ,mBAAS,CAACL,SAAS,GAAGC,KAAK,GAAGF,MAAM,KAN5B,6BA4BnC,OACI,6BACK,yBAAKI,UAAU,oBAEf,4BAAQO,SAAU,SAACC,GAAKL,EAAYK,EAAEC,OAAOC,QAASV,UAAU,gBAAgBW,GAAG,sBAC/E,4BAAQC,UAAQ,GAAhB,eACA,6CACA,6CACA,4CACA,6CAIR,6BAAK,4BAAQC,QAjCE,WACH,aAAVhB,GAAiC,aAAVA,GAAiC,WAAVA,GAA+B,WAAVA,EAClEiB,MAAO,QAGPA,MAAO,WA4BL,kBAEL,6BACK,2BAAOP,SAAU,SAACC,GAAKJ,EAAQI,EAAEC,OAAOC,QAASX,KAAK,OAAOgB,YAAY,UAG9E,6BAAK,4BAAQF,QA9BF,WACRf,EAAKkB,QAAQ,EACbF,MAAO,QAGPA,MAAO,WAyBL,eAEL,yBAAKd,UAAU,oBAEb,4BAAQO,SAAU,SAACC,GAAKF,EAAaE,EAAEC,OAAOC,QAASV,UAAU,gBAAgBW,GAAG,sBAChF,4BAAQC,UAAQ,GAAhB,gBACA,yCACA,yCACA,uCACA,0CAKN,6BACI,kBAAC,IAAD,CAAMnB,GAAG,aAAY,4BAAQoB,QAAS,WAAKrB,EAAMyB,IAAIpB,EAASC,EAAKO,IAAaN,KAAK,SAASC,UAAU,mBAAnF,kBC/DnB,SAASkB,IACpB,OACI,6BACI,+CCFG,SAASC,EAAK3B,GAIzB,OACI,6BACI,6BACA,0CAAmB,6BACnB,gDC8BG4B,MA9Bf,WAAgB,IAAD,EAEgBlB,mBAAS,CAAC,CAACL,SAAS,GAAGC,KAAK,GAAGO,UAAU,MAFzD,mBAENgB,EAFM,KAEGC,EAFH,KAIPC,EAAc,SAAC1B,EAASC,EAAKO,GACjCiB,EAAY,CAAC,CAACzB,SAASA,EAASC,KAAKA,EAAKO,UAAUA,IAAzC,mBAAuDgB,MAKpE,OACE,yBAAKrB,UAAU,OACP,kBAACkB,EAAD,MAEA,kBAAC,IAAD,KACGG,EAASG,KAAI,SAACC,GACd,OAAO,kBAAClC,EAAD,CAAUM,SAAU4B,EAAQ5B,SAAUC,KAAM2B,EAAQ3B,KAAMF,MAAO6B,EAAQpB,eAGjF,kBAAC,IAAD,KACK,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,WAAWC,UAAW,WAAK,OAAO,kBAAC3B,EAAD,CAASgB,IAAKM,OAClE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,QAAQC,UAAW,WAAK,OAAO,kBAACT,EAAD,aCpBhDU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.30bf7a9a.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Homepage(props) {\r\n    return (\r\n        <div>\r\n            <div>\r\n              <Link to='/room'> <button style={{backgroundColor:props.color}}><h2>{props.typeroom}</h2><h3>{props.name}</h3> </button></Link>\r\n            </div>\r\n            <div>\r\n            <Link to='/addroom'><button type=\"button\" className=\"btn btn-success\">+</button></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Addroom(props) {\r\n\r\n    \r\n    const [typeroom,setTypeRoom]=useState('');\r\n    const [name,setName]=useState('');\r\n    const [roomColor,setRoomColor]=useState('');\r\n    const [newRoom,setnewRoom]=useState({typeroom:'',name:'',color:''})\r\n\r\n    const validTypeRoom=()=>{\r\n        if(typeroom==\"Ambatroom\"||typeroom==\"Sleeproom\"||typeroom==\"Bedroom\"||typeroom==\"ckitcen\"){\r\n            alert ('good')\r\n        }\r\n        else{\r\n            alert ('ERROR')\r\n        }\r\n    }\r\n\r\n    const validName=()=>{\r\n        if (name.length<=5){\r\n            alert ('good')\r\n        }\r\n        else{\r\n            alert ('ERROR')\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n             <div className=\"input-group mb-3\">\r\n             \r\n             <select onChange={(e)=>{setTypeRoom(e.target.value)}} className=\"custom-select\" id=\"inputGroupSelect01\">\r\n                 <option selected>Choose room</option>\r\n                 <option >Sleeproom</option>\r\n                 <option >Ambatroom</option>\r\n                 <option >Bethroom</option>\r\n                 <option >kitchen</option>\r\n             </select>\r\n         </div>\r\n\r\n         <div><button onClick={validTypeRoom}>chek typeroom</button></div>\r\n\r\n         <div>\r\n              <input onChange={(e)=>{setName(e.target.value)}} type=\"text\" placeholder=\"name\"/>\r\n         </div>\r\n\r\n         <div><button onClick={validName}>check name</button></div>\r\n\r\n         <div className=\"input-group mb-3\">\r\n           \r\n           <select onChange={(e)=>{setRoomColor(e.target.value)}} className=\"custom-select\" id=\"inputGroupSelect01\">\r\n               <option selected>Choose color</option>\r\n               <option >Yelow</option>\r\n               <option >Green</option>\r\n               <option >Red</option>\r\n               <option >Pink</option>\r\n           </select>\r\n           \r\n       </div>\r\n\r\n         <div>\r\n             <Link to='/homepage'><button onClick={()=>{props.add(typeroom,name,roomColor)}} type=\"button\" className=\"btn btn-success\">create room</button></Link>\r\n         </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Title() {\r\n    return (\r\n        <div>\r\n            <h1>My Smart House</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Room(props) {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n            <h2>props.name</h2><br/>\r\n            <h3>props.typeroom</h3>\r\n            </div>\r\n\r\n\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react';\nimport {HashRouter as Router,Switch,Route} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Homepage from './components/Homepage';\nimport Addroom from './components/Addroom';\nimport  Title from './components/Title';\nimport Room from './components/Room';\n\n\n\nfunction App() {\n\n  const [roomList,setRoomList]=useState([{typeroom:'',name:'',roomColor:''}])\n\n  const addRoomToList=(typeroom,name,roomColor)=>{\n    setRoomList([{typeroom:typeroom,name:name,roomColor:roomColor},...roomList])\n  }\n\n\n\n  return (\n    <div className=\"App\">\n            <Title/>\n\n            <Router>\n              {roomList.map((element)=>{\n               return <Homepage typeroom={element.typeroom} name={element.name} color={element.roomColor}/>\n              })}\n              \n              <Switch>\n                   <Route exact path='/addroom' component={()=>{return <Addroom add={addRoomToList} />}}/>\n                   <Route exact path='/room' component={()=>{return <Room/>}}/>\n     \n              </Switch>\n            </Router>\n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}